const { Connection, Keypair, PublicKey, clusterApiUrl, LAMPORTS_PER_SOL, Transaction } = require('@solana/web3.js');
const { getOrCreateAssociatedTokenAccount, createAssociatedTokenAccountInstruction, getAssociatedTokenAddress, createTransferInstruction, getMint } = require('@solana/spl-token');
const fs = require('fs');
const readline = require('readline');
const path = require('path');
const log = require('../utils/logger');
const bs58 = require('bs58').default;

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => {
        rl.question(query, resolve);
    });
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function safeWriteFile(filePath, data) {
    try {
        const dir = path.dirname(filePath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
        fs.writeFileSync(filePath, data);
        return true;
    } catch (error) {
        log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª ${filePath}: ${error.message}`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
async function processWithConcurrencyLimit(items, concurrencyLimit, processor) {
    const results = [];
    const running = new Set();
    
    for (const item of items) {
        const promise = (async () => {
            try {
                return await processor(item);
            } catch (error) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ–º –µ–π –ø—Ä–µ—Ä–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
                log.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${item}: ${error.message}`);
                return { item, success: false, error: error.message };
            } finally {
                running.delete(promise);
            }
        })();
        
        running.add(promise);
        results.push(promise);
        
        if (running.size >= concurrencyLimit) {
            await Promise.race(running);
        }
    }
    
    return Promise.all(results);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å—Ç–µ–∫—à–µ–≥–æ –±–ª–æ–∫—Ö–µ—à–∞
async function createAndSendTransaction(connection, wallet, transaction, attempt) {
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫—Ö–µ—à –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
    const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
    transaction.recentBlockhash = blockhash;
    transaction.feePayer = wallet.publicKey;
    
    log.info(`üîÑ [–ü–æ–ø—ã—Ç–∫–∞ ${attempt}] –°–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –±–ª–æ–∫—Ö–µ—à–µ–º: ${blockhash.substring(0, 8)}...`);
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const simulation = await connection.simulateTransaction(transaction);
    
    if (simulation.value.err) {
        const errorMsg = JSON.stringify(simulation.value.err);
        log.error(`‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${errorMsg}`);
        throw new Error(`Simulation failed: ${errorMsg}`);
    }
    
    log.info(`‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞`);
    log.info(`üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction.sign(wallet);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const txId = await connection.sendRawTransaction(transaction.serialize());
    
    log.info(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TX ID: ${txId})...`);
    
    try {
        // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await connection.confirmTransaction({
            signature: txId,
            blockhash: blockhash,
            lastValidBlockHeight: lastValidBlockHeight
        });
        
        return { txId, success: true };
    } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º –±–ª–æ–∫—Ö–µ—à–µ–º
        if (error.message.includes('blockhash not found') || 
            error.message.includes('block height exceeded') || 
            error.message.includes('invalid blockhash') ||
            error.message.includes('timeout')) {
            
            log.warn(`‚ö†Ô∏è –ë–ª–æ–∫—Ö–µ—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ —Ç–∞–π–º-–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –±–ª–æ–∫—Ö–µ—à.`);
            throw new Error('BLOCKHASH_EXPIRED');
        }
        
        throw error;
    }
}

async function sendTokensToHolders() {
    try {
        log.info('üì¨ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ —Ö–æ–ª–¥–µ—Ä–∞–º NFT\n');
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const logsDir = path.join(__dirname, '../logs');
        const resultsDir = path.join(__dirname, '../results');
        
        for (const dir of [logsDir, resultsDir]) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const successFilePath = path.join(resultsDir, `success_${timestamp}.txt`);
        const failureFilePath = path.join(resultsDir, `failure_${timestamp}.txt`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
        fs.writeFileSync(successFilePath, '');
        fs.writeFileSync(failureFilePath, '');
        
        log.info(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª—ã:\n - ${successFilePath}\n - ${failureFilePath}`);
        
        if (!fs.existsSync('holders.json')) {
            log.error('‚ùå –§–∞–π–ª holders.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–µ—Ä–æ–≤.');
            return;
        }
        
        // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Ö–æ–ª–¥–µ—Ä–æ–≤
        let holdersData = JSON.parse(fs.readFileSync('holders.json', 'utf8'));
        let holderAddresses = Object.keys(holdersData);
        
        if (holderAddresses.length === 0) {
            log.error('‚ùå –°–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–µ—Ä–æ–≤ –ø—É—Å—Ç.');
            return;
        }
        
        log.info(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${holderAddresses.length} —Ö–æ–ª–¥–µ—Ä–æ–≤.`);
        
        const defaultRPC = clusterApiUrl('devnet');
        const customRPC = await question(`–í–≤–µ–¥–∏—Ç–µ RPC URL (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è devnet): `);
        const rpcUrl = customRPC || defaultRPC;
        
        log.info(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${customRPC ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É RPC' : 'Solana Devnet'}...`);
        const connection = new Connection(rpcUrl, 'confirmed');
        
        try {
            const version = await connection.getVersion();
            log.info(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Solana ${version['solana-core']}`);
        } catch (error) {
            log.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.');
            return;
        }
        
        let wallet;
        const walletFile = 'modules/sender.json';
        
        if (fs.existsSync(walletFile)) {
            try {
                const jsonData = JSON.parse(fs.readFileSync(walletFile, 'utf8'));
                const privateKeyBase58 = jsonData.sender;
                if (!privateKeyBase58) {
                    log.error('‚ùå –í —Ñ–∞–π–ª–µ sender.json –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ "sender" —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º');
                    return;
                }
                const secretKey = bs58.decode(privateKeyBase58);
                wallet = Keypair.fromSecretKey(secretKey);
                log.info(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${wallet.publicKey.toString()}`);
            } catch (error) {
                log.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${error.message}`);
                return;
            }
        } else {
            log.error('‚ùå –§–∞–π–ª –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª modules/sender.json');
            log.error('   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {"sender": "base58_–ø—Ä–∏–≤–∞—Ç–Ω—ã–π_–∫–ª—é—á"}');
            return;
        }
        
        const solBalance = await connection.getBalance(wallet.publicKey);
        log.info(`üí∞ –ë–∞–ª–∞–Ω—Å SOL: ${solBalance / LAMPORTS_PER_SOL} SOL`);
        
        const estimatedCost = 0.00003 * LAMPORTS_PER_SOL * holderAddresses.length;
        log.info(`üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${estimatedCost / LAMPORTS_PER_SOL} SOL`);
        
        if (solBalance < estimatedCost) {
            log.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${estimatedCost / LAMPORTS_PER_SOL} SOL.`);
            const forceContinue = await question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å? (–¥–∞/–Ω–µ—Ç): ');
            if (forceContinue.toLowerCase() !== '–¥–∞' && forceContinue.toLowerCase() !== 'yes') {
                return;
            }
        }
        
        const tokenAddressInput = await question('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: ');
        let tokenAddress;
        
        try {
            tokenAddress = new PublicKey(tokenAddressInput);
        } catch (error) {
            log.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞.');
            return;
        }
        
        let tokenInfo;
        try {
            tokenInfo = await getMint(connection, tokenAddress);
            log.info(`‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω. –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: ${tokenInfo.decimals}`);
        } catch (error) {
            log.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å.');
            return;
        }
        
        let senderTokenAccount;
        try {
            senderTokenAccount = await getOrCreateAssociatedTokenAccount(
                connection,
                wallet,
                tokenAddress,
                wallet.publicKey
            );
            
            log.info(`‚úÖ –¢–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${senderTokenAccount.address.toString()}`);
        } catch (error) {
            log.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:', error.message);
            return;
        }
        
        log.info(`üí∞ –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: ${parseInt(senderTokenAccount.amount) / (10 ** tokenInfo.decimals)}`);
        
        const totalHolders = holderAddresses.length;
        
        const multiplierStr = await question('–í–≤–µ–¥–∏—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞ —Å–∫–æ–ª—å–∫–æ —É–º–Ω–æ–∂–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NFT –∫–∞–∂–¥–æ–≥–æ —Ö–æ–ª–¥–µ—Ä–∞): ');
        const multiplier = parseFloat(multiplierStr);
        
        if (isNaN(multiplier) || multiplier <= 0) {
            log.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            return;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
        const concurrencyStr = await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5-10): ');
        const concurrencyLimit = parseInt(concurrencyStr) || 5; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        let totalTokensNeeded = 0;
        for (const holder of holderAddresses) {
            const nftCount = holdersData[holder];
            const tokensToSend = nftCount * multiplier;
            totalTokensNeeded += tokensToSend;
        }
        
        const totalTokensNeededWithDecimals = totalTokensNeeded * (10 ** tokenInfo.decimals);
        
        log.info(`\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–°–°–´–õ–ö–ï ===`);
        log.info(`–í—Å–µ–≥–æ —Ö–æ–ª–¥–µ—Ä–æ–≤: ${totalHolders}`);
        log.info(`–ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier}`);
        log.info(`–í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalTokensNeeded} —Ç–æ–∫–µ–Ω–æ–≤`);
        log.info(`–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${concurrencyLimit}`);
        
        if (parseInt(senderTokenAccount.amount) < totalTokensNeededWithDecimals) {
            log.error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${totalTokensNeeded}, –¥–æ—Å—Ç—É–ø–Ω–æ ${parseInt(senderTokenAccount.amount) / (10 ** tokenInfo.decimals)}`);
            const forceContinue = await question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤? (–¥–∞/–Ω–µ—Ç): ');
            if (forceContinue.toLowerCase() !== '–¥–∞' && forceContinue.toLowerCase() !== 'yes') {
                return;
            }
        }
        
        const confirmation = await question(`\n–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ${totalTokensNeeded} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ${totalHolders} —Ö–æ–ª–¥–µ—Ä–æ–≤? (–¥–∞/–Ω–µ—Ç): `);
        
        if (confirmation.toLowerCase() !== '–¥–∞' && confirmation.toLowerCase() !== 'yes') {
            log.info('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
            return;
        }
        
        const maxRetries = 5;
        const batchSize = 50;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        const successfulAddresses = new Set();
        const failedAddresses = new Set();
        
        log.info('\n=== –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–°–°–´–õ–ö–£ ===');
        
        // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        const startTime = Date.now();
        let processedCount = 0;
        
        for (let i = 0; i < holderAddresses.length; i += batchSize) {
            const batch = holderAddresses.slice(i, i + batchSize);
            
            log.info(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã ${i/batchSize + 1}/${Math.ceil(holderAddresses.length/batchSize)}...`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ö–æ–ª–¥–µ—Ä–æ–≤ (—É–¥–∞–ª—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ)
            const remainingHolders = { ...holdersData };
            successfulAddresses.forEach(address => delete remainingHolders[address]);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω
            safeWriteFile('holders_remaining.json', JSON.stringify(remainingHolders, null, 2));
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
            await processWithConcurrencyLimit(batch, concurrencyLimit, async (holderAddress) => {
                // –ï—Å–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
                if (successfulAddresses.has(holderAddress)) {
                    return { holderAddress, success: true, skipped: true };
                }
                
                const nftCount = holdersData[holderAddress];
                const tokensToSend = nftCount * multiplier;
                const tokensToSendWithDecimals = Math.floor(tokensToSend * (10 ** tokenInfo.decimals));
                
                log.info(`\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${tokensToSend} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ ${holderAddress} (${nftCount} NFT)`);
                
                let success = false;
                let attempts = 0;
                let txId = null;
                let lastError = null;
                
                while (!success && attempts < maxRetries) {
                    attempts++;
                    try {
                        let recipientPublicKey;
                        try {
                            recipientPublicKey = new PublicKey(holderAddress);
                        } catch (error) {
                            log.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å ${holderAddress}`);
                            throw new Error(`Invalid address: ${holderAddress}`);
                        }
                        
                        const recipientTokenAddress = await getAssociatedTokenAddress(
                            tokenAddress,
                            recipientPublicKey
                        );
                        
                        const recipientTokenAccount = await connection.getAccountInfo(recipientTokenAddress);
                        
                        if (!recipientTokenAccount) {
                            log.info(`‚ö†Ô∏è [${holderAddress}] –¢–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...`);
                        }
                        
                        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–µ–∑ –±–ª–æ–∫—Ö–µ—à–∞ - –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ createAndSendTransaction
                        const transaction = new Transaction();
                        
                        if (!recipientTokenAccount) {
                            transaction.add(
                                createAssociatedTokenAccountInstruction(
                                    wallet.publicKey,         // payer
                                    recipientTokenAddress,    // associatedToken
                                    recipientPublicKey,       // owner
                                    tokenAddress              // mint
                                )
                            );
                        }
                        
                        transaction.add(
                            createTransferInstruction(
                                senderTokenAccount.address,   // source
                                recipientTokenAddress,        // destination
                                wallet.publicKey,             // owner
                                BigInt(tokensToSendWithDecimals)
                            )
                        );
                        
                        log.info(`üîÑ [${holderAddress}] –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxRetries} –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –±–ª–æ–∫—Ö–µ—à–∞
                        const result = await createAndSendTransaction(connection, wallet, transaction, attempts);
                        txId = result.txId;
                        
                        log.info(`‚úÖ [${holderAddress}] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! TX ID: ${txId}`);
                        log.info(`üîó [${holderAddress}] https://explorer.solana.com/tx/${txId}?cluster=${rpcUrl.includes('mainnet') ? 'mainnet' : 'devnet'}`);
                        
                        success = true;
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ —É—Å–ø–µ—à–Ω—ã–µ –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Ö–æ–ª–¥–µ—Ä–æ–≤
                        successfulAddresses.add(holderAddress);
                        
                        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                        fs.appendFileSync(successFilePath, `${holderAddress},${nftCount},${tokensToSend},${txId},${new Date().toISOString()}\n`);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                        processedCount++;
                        
                    } catch (error) {
                        lastError = error;
                        
                        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∏—Å—Ç–µ–∫—à–∏–º –±–ª–æ–∫—Ö–µ—à–µ–º, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ –±–µ–∑ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
                        if (error.message === 'BLOCKHASH_EXPIRED') {
                            log.warn(`‚ö†Ô∏è [${holderAddress}] –ë–ª–æ–∫—Ö–µ—à –∏—Å—Ç–µ–∫, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º –±–ª–æ–∫—Ö–µ—à–µ–º...`);
                            attempts--; // –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç—É –ø–æ–ø—ã—Ç–∫—É
                            await sleep(500); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            continue;
                        }
                        
                        log.error(`‚ùå [${holderAddress}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}): ${error.message}`);
                        
                        if (attempts >= maxRetries) {
                            // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤ –Ω–µ—É–¥–∞—á–Ω—ã–µ
                            failedAddresses.add(holderAddress);
                            
                            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                            fs.appendFileSync(failureFilePath, `${holderAddress},${nftCount},${tokensToSend},${error.message},${new Date().toISOString()}\n`);
                        }
                        
                        if (attempts < maxRetries) {
                            const delay = 2000 * attempts;
                            log.info(`‚è≥ [${holderAddress}] –û–∂–∏–¥–∞–µ–º ${delay/1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                            await sleep(delay);
                        }
                    }
                }
                
                return { holderAddress, success, error: success ? null : lastError?.message };
            }).catch(error => {
                // –î–∞–∂–µ –µ—Å–ª–∏ processWithConcurrencyLimit –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É, –º—ã –µ—ë –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–º
                log.error(`–û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${error.message}`);
                return [];
            });
            
            // –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            log.info(`\n--- –¢–ï–ö–£–©–ò–ô –ü–†–û–ì–†–ï–°–° ---`);
            log.info(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successfulAddresses.size}`);
            log.info(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failedAddresses.size}`);
            log.info(`‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${holderAddresses.length - processedCount}`);
            
            // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if (i + batchSize < holderAddresses.length) {
                log.info(`‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (3 —Å–µ–∫—É–Ω–¥—ã)...`);
                await sleep(3000);
            }
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const endTime = Date.now();
        const executionTimeMinutes = Math.floor((endTime - startTime) / 60000);
        const executionTimeSeconds = Math.floor(((endTime - startTime) % 60000) / 1000);
        
        log.info('\n=== –ò–¢–û–ì–ò –†–ê–°–°–´–õ–ö–ò ===');
        log.info(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successfulAddresses.size} / ${holderAddresses.length}`);
        log.info(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: ${failedAddresses.size} / ${holderAddresses.length}`);
        log.info(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTimeMinutes} –º–∏–Ω ${executionTimeSeconds} —Å–µ–∫`);
        log.info(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–∞—Ö:`);
        log.info(` - ${successFilePath}`);
        log.info(` - ${failureFilePath}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (failedAddresses.size > 0) {
            const failureHolders = {};
            for (const address of failedAddresses) {
                failureHolders[address] = holdersData[address];
            }
            
            fs.writeFileSync('holders_retry.json', JSON.stringify(failureHolders, null, 2));
            log.info('\nüìã –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª holders_retry.json —Å –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏.');
            
            const retryFailures = await question('\n–•–æ—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤? (–¥–∞/–Ω–µ—Ç): ');
            
            if (retryFailures.toLowerCase() === '–¥–∞' || retryFailures.toLowerCase() === 'yes') {
                // –ö–æ–ø–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ holders.json –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                fs.writeFileSync('holders.json', JSON.stringify(failureHolders, null, 2));
                log.info('–§–∞–π–ª holders.json –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–µ—É–¥–∞—á–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.');
            }
        } else {
            log.info('\nüéâ –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
        }
        
    } catch (error) {
        log.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        // –î–∞–∂–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
    } finally {
        rl.close();
    }
}

module.exports = sendTokensToHolders;

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é (–Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –º–æ–¥—É–ª—å)
if (require.main === module) {
    sendTokensToHolders().catch(error => {
        log.error('–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º process.exit(1), —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∂–µ—Å—Ç–∫–æ
    });
}