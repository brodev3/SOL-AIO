const { Connection, Keypair, clusterApiUrl, LAMPORTS_PER_SOL } = require('@solana/web3.js');
const { createMint, getOrCreateAssociatedTokenAccount, mintTo } = require('@solana/spl-token');
const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞
function question(query) {
    return new Promise(resolve => {
        rl.question(query, resolve);
    });
}

async function createToken() {
    try {
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ devnet
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Solana Devnet...');
        const connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª–µ–∫
        let wallet;
        const walletFile = 'wallet_devnet.json';
        
        if (fs.existsSync(walletFile)) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫
            const secretKeyString = fs.readFileSync(walletFile, 'utf8');
            const secretKey = Uint8Array.from(JSON.parse(secretKeyString));
            wallet = Keypair.fromSecretKey(secretKey);
            console.log(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª–µ–∫: ${wallet.publicKey.toString()}`);
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
            wallet = Keypair.generate();
            fs.writeFileSync(walletFile, JSON.stringify(Array.from(wallet.secretKey)));
            console.log(`üîë –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫: ${wallet.publicKey.toString()}`);
            console.log(`‚ö†Ô∏è –í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å SOL –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞!`);
            console.log(`   –ü–æ—Å–µ—Ç–∏—Ç–µ: https://faucet.solana.com/ –∏–ª–∏ https://solfaucet.com/`);
            console.log(`   –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å: ${wallet.publicKey.toString()}`);
            
            const solReceived = await question('\n–ü–æ–ª—É—á–∏–ª–∏ SOL? (–¥–∞/–Ω–µ—Ç): ');
            if (solReceived.toLowerCase() !== '–¥–∞' && solReceived.toLowerCase() !== 'yes') {
                console.log('–ü–æ–ª—É—á–∏—Ç–µ SOL –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
                return;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
        const balance = await connection.getBalance(wallet.publicKey);
        console.log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance / LAMPORTS_PER_SOL} SOL`);
        
        if (balance < 0.05 * LAMPORTS_PER_SOL) {
            console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 0.05 SOL)');
            console.log('–ü–æ–ª—É—á–∏—Ç–µ SOL –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
            return;
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
        const tokenName = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ');
        const tokenSymbol = await question('–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞: ');
        const decimals = parseInt(await question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ (–æ–±—ã—á–Ω–æ 9): '));
        const initialSupply = parseFloat(await question('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π supply —Ç–æ–∫–µ–Ω–∞: '));
        
        console.log(`\nü™ô –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω ${tokenName} (${tokenSymbol})...`);
        
        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω—Ç —Ç–æ–∫–µ–Ω–∞
        const mint = await createMint(
            connection,
            wallet,          // payer
            wallet.publicKey, // mintAuthority
            wallet.publicKey, // freezeAuthority
            decimals
        );
        
        console.log(`‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω! –ê–¥—Ä–µ—Å: ${mint.toString()}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        console.log('üëõ –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç...');
        const tokenAccount = await getOrCreateAssociatedTokenAccount(
            connection,
            wallet,
            mint,
            wallet.publicKey
        );
        
        console.log(`‚úÖ –¢–æ–∫–µ–Ω-–∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${tokenAccount.address.toString()}`);
        
        // –ú–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
        console.log(`üíµ –ú–∏–Ω—Ç–∏–º ${initialSupply} —Ç–æ–∫–µ–Ω–æ–≤...`);
        const mintAmount = BigInt(Math.floor(initialSupply * (10 ** decimals)));
        
        await mintTo(
            connection,
            wallet,
            mint,
            tokenAccount.address,
            wallet.publicKey,
            mintAmount
        );
        
        console.log(`‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!`);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        console.log('\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ï ===');
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${tokenName}`);
        console.log(`–°–∏–º–≤–æ–ª: ${tokenSymbol}`);
        console.log(`–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞: ${mint.toString()}`);
        console.log(`–î–µ—Å—è—Ç–∏—á–Ω—ã–µ –∑–Ω–∞–∫–∏: ${decimals}`);
        console.log(`–ù–∞—á–∞–ª—å–Ω—ã–π supply: ${initialSupply}`);
        console.log(`–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è: ${wallet.publicKey.toString()}`);
        console.log(`–°–µ—Ç—å: devnet`);
        console.log('\n=== –î–ê–ù–ù–´–ï –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ===');
        console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–∫–µ–Ω: https://explorer.solana.com/address/${mint.toString()}?cluster=devnet`);
        console.log(`–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: https://explorer.solana.com/address/${wallet.publicKey.toString()}?cluster=devnet`);
        
    } catch (error) {
        console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error);
    } finally {
        rl.close();
    }
}

createToken().catch(console.error);